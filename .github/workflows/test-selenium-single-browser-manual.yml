name: test-selenium-single-browser-manual
run-name: test-selenium-${{ github.event.inputs.browser }}-${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      browser:
        type: choice
        description: Which browser to test
        required: true
        options:
          - firefox
          - chrome

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      selenium:
        image: selenium/standalone-${{ github.event.inputs.browser }}
        options: --shm-size=2gb
        ports:
          - 4444:4444

    steps:
    # This step checks out a copy of your repository
    - name: Checkout code
      uses: actions/checkout@v3

    # This step sets up a Python 3.10 environment
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    # This step caches dependencies to speed up workflows
    - name: Cache pip packages
      uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: | 
          ${{ runner.os }}-pip-
       
    # This step installs jq, a lightweight and flexible command-line JSON processor
    - name: Install jq to be able to modify the config.json file
      run: sudo apt-get install jq

    # This step creates a config.json file and updates it with the access token
    - name: Create and update config.json
      run: |
        echo '${{ vars.CONFIG_JSON }}' | jq --arg browser "${{ github.event.inputs.browser }}" '.selenium.browser = $browser' > config.json
        
    # This step installs necessary dependencies as per requirements.txt
    - name: Install dependencies
      run: |
        echo "Upgrading pip..."
        python -m pip install --upgrade pip
        echo "Installing requirements..."
        pip install -r requirements.txt

    # This step runs flake8 for linting
    - name: Run flake8 linting
      run: |
        echo "Running flake8 linting..."
        flake8 . --count --show-source --statistics
        
    # This step runs pytest to execute tests and generate coverage report
    - name: Run pytest with coverage and generate HTML report
      env:
        BROWSER: ${{ github.event.inputs.browser }}
      run: | 
        echo "Running tests with pytest..."
        pytest -s --cov=./tests/selenium/test_selenium_pom.py tests/selenium/test_selenium_pom.py -v --html=tests-report.html --capture=sys --cov-report html  --cov-report term
        
    # This step archives the coverage report
    - name: Archive coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-report-${{ github.event.inputs.browser }}-${{ github.run_number }}
        path: |
          tests-report.html
          htmlcov/
          screenshots/
